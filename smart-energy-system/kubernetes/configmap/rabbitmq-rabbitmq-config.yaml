apiVersion: v1
data:
  enabled_plugins: |
    [rabbitmq_management,rabbitmq_peer_discovery_k8s,prometheus_rabbitmq_exporter].
  rabbitmq.conf: |
    ## Clustering
    cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    # Use the Pods hostname instead of IP addresses to create a cluster.
    # The Pod IP doesn't work with persistence because new Pods get a new IP addresses,
    # that doesn't have access to existing data after the node name has changed.
    cluster_formation.k8s.address_type = hostname
    cluster_formation.node_cleanup.interval = 10
    # Set to false if automatic removal of unknown/absent nodes
    # is desired. This can be dangerous, see
    #  * http://www.rabbitmq.com/cluster-formation.html#node-health-checks-and-cleanup
    #  * https://groups.google.com/forum/#!msg/rabbitmq-users/wuOfzEywHXo/k8z_HWIkBgAJ
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    ## queue master locator
    queue_master_locator = min-masters
    ## The default "guest" user is only permitted to access the server
    ## via a loopback interface (e.g. localhost)
    ## See http://www.rabbitmq.com/access-control.html#loopback-users
    loopback_users.guest = false
kind: ConfigMap
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","data":{"enabled_plugins":"[rabbitmq_management,rabbitmq_peer_discovery_k8s,prometheus_rabbitmq_exporter].\n","rabbitmq.conf":"## Clustering\ncluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s\ncluster_formation.k8s.host = kubernetes.default.svc.cluster.local\n# Use the Pods hostname instead of IP addresses to create a cluster.\n# The Pod IP doesn't work with persistence because new Pods get a new IP addresses,\n# that doesn't have access to existing data after the node name has changed.\ncluster_formation.k8s.address_type = hostname\ncluster_formation.node_cleanup.interval = 10\n# Set to false if automatic removal of unknown/absent nodes\n# is desired. This can be dangerous, see\n#  * http://www.rabbitmq.com/cluster-formation.html#node-health-checks-and-cleanup\n#  * https://groups.google.com/forum/#!msg/rabbitmq-users/wuOfzEywHXo/k8z_HWIkBgAJ\ncluster_formation.node_cleanup.only_log_warning = true\ncluster_partition_handling = autoheal\n## queue master locator\nqueue_master_locator = min-masters\n## The default \"guest\" user is only permitted to access the server\n## via a loopback interface (e.g. localhost)\n## See http://www.rabbitmq.com/access-control.html#loopback-users\nloopback_users.guest = false\n"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"rabbitmq-server","app.kubernetes.io/name":"rabbitmq"},"name":"rabbitmq-rabbitmq-config","namespace":"default","ownerReferences":[{"apiVersion":"app.k8s.io/v1beta1","blockOwnerDeletion":true,"kind":"Application","name":"rabbitmq","uid":"23a19598-f977-11e9-a465-42010a80005e"}]}}
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: rabbitmq-server
    app.kubernetes.io/name: rabbitmq
  name: rabbitmq-rabbitmq-config
  ownerReferences:
  - apiVersion: app.k8s.io/v1beta1
    blockOwnerDeletion: true
    kind: Application
    name: rabbitmq
    uid: 23a19598-f977-11e9-a465-42010a80005e
  selfLink: /api/v1/namespaces/default/configmaps/rabbitmq-rabbitmq-config
